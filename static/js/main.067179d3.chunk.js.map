{"version":3,"sources":["graph.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","scale","d3","color","d","group","data","miserables","links","map","nodes","simulation","force","id","width","height","useEffect","svg","attr","link","append","selectAll","join","Math","sqrt","value","node","call","on","event","active","alphaTarget","restart","subject","fx","x","fy","y","drag","text","source","target","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAwGeA,MAnGf,WAEE,IAAMC,EAAQC,IAAgBA,KAExBC,EAAQ,SAACC,GACb,OAAOH,EAAMG,EAAEC,QAgCXC,EAAOC,EAGPC,EAAQF,EAAKE,MAAMC,KAAI,SAAAL,GAAC,sBAASA,MACjCM,EAAQJ,EAAKI,MAAMD,KAAI,SAAAL,GAAC,sBAASA,MAEjCO,EAAaT,IAAmBQ,GACjCE,MAAM,OAAQV,IAAaM,GAAOK,IAAG,SAAAT,GAAC,OAAIA,EAAES,OAC5CD,MAAM,SAAUV,OAChBU,MAAM,SAAUV,IAAeY,IAAWC,MA+C/C,OA1CAC,qBAAU,WACR,IAAMC,EAAMf,IAAU,WACnBgB,KAAK,QAlBI,KAmBTA,KAAK,SApBK,KAwBPC,EAAOF,EAAIG,OAAO,KACnBF,KAAK,SAAU,QACfA,KAAK,iBAAkB,IACzBG,UAAU,QACVf,KAAKE,GACLc,KAAK,QACHJ,KAAK,gBAAgB,SAAAd,GAAC,OAAImB,KAAKC,KAAKpB,EAAEqB,UAErCC,EAAOT,EAAIG,OAAO,KACnBF,KAAK,SAAU,QACfA,KAAK,eAAgB,KACvBG,UAAU,UACVf,KAAKI,GACLY,KAAK,UACHJ,KAAK,IAAK,GACVA,KAAK,OAAQf,GACbwB,KAlEM,SAAAhB,GAmBX,OAAOT,MACF0B,GAAG,SAlBR,SAAqBC,GACdA,EAAMC,QAAQnB,EAAWoB,YAAY,IAAKC,UAC/CH,EAAMI,QAAQC,GAAKL,EAAMI,QAAQE,EACjCN,EAAMI,QAAQG,GAAKP,EAAMI,QAAQI,KAgB9BT,GAAG,QAbR,SAAiBC,GACfA,EAAMI,QAAQC,GAAKL,EAAMM,EACzBN,EAAMI,QAAQG,GAAKP,EAAMQ,KAYtBT,GAAG,OATR,SAAmBC,GACZA,EAAMC,QAAQnB,EAAWoB,YAAY,GAC1CF,EAAMI,QAAQC,GAAK,KACnBL,EAAMI,QAAQG,GAAK,QAkDXE,CAAK3B,IAEfe,EAAKN,OAAO,SACLmB,MAAK,SAAAnC,GAAC,OAAIA,EAAES,MAEnBF,EAAWiB,GAAG,QAAQ,WACpBT,EACKD,KAAK,MAAM,SAAAd,GAAC,OAAIA,EAAEoC,OAAOL,KACzBjB,KAAK,MAAM,SAAAd,GAAC,OAAIA,EAAEoC,OAAOH,KACzBnB,KAAK,MAAM,SAAAd,GAAC,OAAIA,EAAEqC,OAAON,KACzBjB,KAAK,MAAM,SAAAd,GAAC,OAAIA,EAAEqC,OAAOJ,KAE9BX,EACKR,KAAK,MAAM,SAAAd,GAAC,OAAIA,EAAE+B,KAClBjB,KAAK,MAAM,SAAAd,GAAC,OAAIA,EAAEiC,WAMzB,qBAAKK,UAAU,YCnFJC,MAbf,WACE,OACE,sBAAKD,UAAU,MAAf,UACE,iCACE,gDAIF,cAAC,EAAD,QCCSE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.067179d3.chunk.js","sourcesContent":["import './App.css';\nimport * as d3 from \"d3\";\nimport miserables from './miserables.json';\nimport React, { useEffect } from 'react';\n\nfunction Graph() {\n\n  const scale = d3.scaleOrdinal(d3.schemeCategory10);\n\n  const color = (d)=>{\n    return scale(d.group)\n  };\n\n  const drag = simulation => {\n\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n    return d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n  }\n\n\n  const height = 600;\n  const width = 600;\n\n  const data = miserables;\n\n\n  const links = data.links.map(d => ({...d}));\n  const nodes = data.nodes.map(d => ({...d}));\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(links).id(d => d.id))\n      .force(\"charge\", d3.forceManyBody())\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n  // invalidation.then(() => simulation.stop());\n\n  // const chart= svg.node();\n  useEffect(() => {\n    const svg = d3.select('.chart2')\n      .attr('width', width)\n      .attr('height', height);\n\n    // console.log(svg);\n\n    const link = svg.append(\"g\")\n        .attr(\"stroke\", \"#999\")\n        .attr(\"stroke-opacity\", 0.6)\n      .selectAll(\"line\")\n      .data(links)\n      .join(\"line\")\n        .attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n    const node = svg.append(\"g\")\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"stroke-width\", 1.5)\n      .selectAll(\"circle\")\n      .data(nodes)\n      .join(\"circle\")\n        .attr(\"r\", 5)\n        .attr(\"fill\", color)\n        .call(drag(simulation));\n\n    node.append(\"title\")\n          .text(d => d.id);\n\n    simulation.on(\"tick\", () => {\n      link\n          .attr(\"x1\", d => d.source.x)\n          .attr(\"y1\", d => d.source.y)\n          .attr(\"x2\", d => d.target.x)\n          .attr(\"y2\", d => d.target.y);\n\n      node\n          .attr(\"cx\", d => d.x)\n          .attr(\"cy\", d => d.y);\n    });\n  });\n\n\n  return (\n    <svg className='chart2'>\n    </svg>\n  );\n}\n\nexport default Graph;\n","import './App.css';\nimport Graph from './graph';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header >\n        <p>\n          D3JS in REACT\n        </p>\n      </header>\n      <Graph></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}